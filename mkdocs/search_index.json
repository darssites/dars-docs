{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the \nDars\n Documentation!\n\n\nThe simple, Python-based HTML alternative that can double as a framework.\n\n\nSee \nGetting Started\n to get going.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-the-dars-documentation",
            "text": "The simple, Python-based HTML alternative that can double as a framework.  See  Getting Started  to get going.",
            "title": "Welcome to the Dars Documentation!"
        },
        {
            "location": "/getting-started/",
            "text": "Getting Started\n\n\nWelcome to dars! This tutorial will help you to get everything set up and running.\n\n\nFirst download Python \n3\n from there website \nhere\n. Then, open up your favorite shell and type: \npython --version\n. You should see \nPython [version number]\n. If you don't try reinstalling.\n\n\nThen, head over to dars' \nproject page\n and click the green \"Download\" button, or, if you've got git, you can clone it from \nhttp://github.com/darssites/dars\n.\n\n\nNow open the folder you got and edit the \nuser.py\n file in your favorite editor (I use \natom\n). This file is where you put all of your website's code, and should look a bit like this:\n\n\n#\n# The user's code.\n#\n\nfrom classes.Paragraph import Paragraph\n\ndef code(page):\n\ntext = Paragraph(\"Mooooooo!\")\npage.append(text)\n\npage.addDefaultStyle()\n\npage.close()\n\n\n\nAlthough the code from \ndef code(page):\n to \npage.addDefaultStyle()\n changes a lot.\n\n\nCreating a simple site\n\n\nTo make the very basic site, open up our \nuser.py\n file again in your favorite editor. dars comes with a bunch of classes, each representing a single or set of HTML tags. To create a Paragraph on your site, clear out all the code from \ndef code(page):\n to \npage.addDefaultStyle()\n and replace it with:\n\n\npara = Paragraph(\"Hello World!\")\npage.append(para)\n\n\n\nLet's walk through this. The first line creates a Paragraph object, which takes one mandatory argument, the text. I've given it the text \"Hello World!\".\n\n\nThe second line adds the para object to our site, stored in the variable \"page\". \nNote that the order things go on your page is the order you \nappend()\n them in.\n\n\nTesting\n\n\ndars comes bundled with a teeny-tiny development-quality webserver \nfor testing your code\n. It's really just not good enough, and dars produces normal HTML code so when you've done working dev magic, you can use something high-quality like \nApache\n.\n\n\nBut until then, you can use the one that dars gave you. First, generate your code by entering the following into your favorite shell (make sure you're in the \"dars\" directory you downloaded!):\n\n\n$ python dars.py generate\n\n\n\n\nIt should give you some info, then exit. You can then start the server with:\n\n\n$ python dars.py serve\n\n\n\n\nWhich sets everything up and gets your mini-server going. You can then visit \nhttp://localhost/\n to view your page!",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#getting-started",
            "text": "Welcome to dars! This tutorial will help you to get everything set up and running.  First download Python  3  from there website  here . Then, open up your favorite shell and type:  python --version . You should see  Python [version number] . If you don't try reinstalling.  Then, head over to dars'  project page  and click the green \"Download\" button, or, if you've got git, you can clone it from  http://github.com/darssites/dars .  Now open the folder you got and edit the  user.py  file in your favorite editor (I use  atom ). This file is where you put all of your website's code, and should look a bit like this:  #\n# The user's code.\n#\n\nfrom classes.Paragraph import Paragraph\n\ndef code(page):\n\ntext = Paragraph(\"Mooooooo!\")\npage.append(text)\n\npage.addDefaultStyle()\n\npage.close()  Although the code from  def code(page):  to  page.addDefaultStyle()  changes a lot.",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#creating-a-simple-site",
            "text": "To make the very basic site, open up our  user.py  file again in your favorite editor. dars comes with a bunch of classes, each representing a single or set of HTML tags. To create a Paragraph on your site, clear out all the code from  def code(page):  to  page.addDefaultStyle()  and replace it with:  para = Paragraph(\"Hello World!\")\npage.append(para)  Let's walk through this. The first line creates a Paragraph object, which takes one mandatory argument, the text. I've given it the text \"Hello World!\".  The second line adds the para object to our site, stored in the variable \"page\".  Note that the order things go on your page is the order you  append()  them in.",
            "title": "Creating a simple site"
        },
        {
            "location": "/getting-started/#testing",
            "text": "dars comes bundled with a teeny-tiny development-quality webserver  for testing your code . It's really just not good enough, and dars produces normal HTML code so when you've done working dev magic, you can use something high-quality like  Apache .  But until then, you can use the one that dars gave you. First, generate your code by entering the following into your favorite shell (make sure you're in the \"dars\" directory you downloaded!):  $ python dars.py generate  It should give you some info, then exit. You can then start the server with:  $ python dars.py serve  Which sets everything up and gets your mini-server going. You can then visit  http://localhost/  to view your page!",
            "title": "Testing"
        },
        {
            "location": "/classes/paragraph/",
            "text": "Paragraph Class\n\n\nThis class is the dars wrapper for the \n<p></p>\n element in HTML. This is for displaying standard text, but also has markdown support.\n\n\nSyntax\n\n\nWithout Markdown:\n\n\nobj = Paragraph(\"paragraph text\")\n\n\n\n\nProduces:\n\n\n<p>paragraph text</p>\n\n\n\n\nThe Paragraph object also auto-parses markdown:\n\n\nobj = Paragraph(\"**formatted** _paragraph_ `text`\")\n\n\n\n\nProduces:\n\n\n<p><b>formatted</b> <i>paragraph</i> <code>text</code></p>\n\n\n\n\nThis would create way too many objects if you were to write this out with Bold, Code, and Italics objects, making this almost like a shorthand notation.",
            "title": "Paragraph"
        },
        {
            "location": "/classes/paragraph/#paragraph-class",
            "text": "This class is the dars wrapper for the  <p></p>  element in HTML. This is for displaying standard text, but also has markdown support.",
            "title": "Paragraph Class"
        },
        {
            "location": "/classes/paragraph/#syntax",
            "text": "Without Markdown:  obj = Paragraph(\"paragraph text\")  Produces:  <p>paragraph text</p>  The Paragraph object also auto-parses markdown:  obj = Paragraph(\"**formatted** _paragraph_ `text`\")  Produces:  <p><b>formatted</b> <i>paragraph</i> <code>text</code></p>  This would create way too many objects if you were to write this out with Bold, Code, and Italics objects, making this almost like a shorthand notation.",
            "title": "Syntax"
        },
        {
            "location": "/classes/heading/",
            "text": "Heading Class\n\n\nThis class is the dars wrapper for the \n<h1></h1>\n element of HTML.\n\n\nSyntax\n\n\nobj = Heading(\"heading text\", level=3)\n\n\n\n\nProduces:\n\n\n<h3>heading text</h3>\n\n\n\n\nYou don't have to specify the level, with just the text it will set the level to 1.\n\n\nobj = Heading(\"heading text\")\n\n\n\n\nProduces:\n\n\n<h1>Heading text</h1>",
            "title": "Heading"
        },
        {
            "location": "/classes/heading/#heading-class",
            "text": "This class is the dars wrapper for the  <h1></h1>  element of HTML.",
            "title": "Heading Class"
        },
        {
            "location": "/classes/heading/#syntax",
            "text": "obj = Heading(\"heading text\", level=3)  Produces:  <h3>heading text</h3>  You don't have to specify the level, with just the text it will set the level to 1.  obj = Heading(\"heading text\")  Produces:  <h1>Heading text</h1>",
            "title": "Syntax"
        },
        {
            "location": "/classes/link/",
            "text": "Link Class\n\n\nThis class is the dars wrapper for the \n<a></a>\n element of HTML.\n\n\nSyntax\n\n\nobj = Link(\"Google\", target=\"http://google.com/\")\n\n\n\n\nProduces:\n\n\n<a href=\"http://google.com\">Google</a>\n\n\n\n\nYou can also really easily add an onclick javascript function to said link:\n\n\nobj = Link(\"Google\", target=\"http://google.com/\", function=\"coolKids()\")\n\n\n\n\nProduces:\n\n\n<a href=\"http://google.com\" onclick=\"coolKids()\">Google</a>\n\n\n\n\nAnd if you don't specify a target, the link won't go anywhere:\n\n\nobj = Link(\"Google\", function=\"coolKids()\")\n\n\n\n\nProduces:\n\n\n<a href=\"#\" onclick=\"coolKids()\">Google</a>",
            "title": "Link"
        },
        {
            "location": "/classes/link/#link-class",
            "text": "This class is the dars wrapper for the  <a></a>  element of HTML.",
            "title": "Link Class"
        },
        {
            "location": "/classes/link/#syntax",
            "text": "obj = Link(\"Google\", target=\"http://google.com/\")  Produces:  <a href=\"http://google.com\">Google</a>  You can also really easily add an onclick javascript function to said link:  obj = Link(\"Google\", target=\"http://google.com/\", function=\"coolKids()\")  Produces:  <a href=\"http://google.com\" onclick=\"coolKids()\">Google</a>  And if you don't specify a target, the link won't go anywhere:  obj = Link(\"Google\", function=\"coolKids()\")  Produces:  <a href=\"#\" onclick=\"coolKids()\">Google</a>",
            "title": "Syntax"
        },
        {
            "location": "/classes/bold/",
            "text": "Bold Class\n\n\nThis class is the dars wrapper for the \n<b></b>\n element of HTML.\n\n\nSyntax\n\n\nobj = Bold(\"spam-o\")\n\n\n\n\nProduces:\n\n\n<b>spam-o</b>",
            "title": "Bold"
        },
        {
            "location": "/classes/bold/#bold-class",
            "text": "This class is the dars wrapper for the  <b></b>  element of HTML.",
            "title": "Bold Class"
        },
        {
            "location": "/classes/bold/#syntax",
            "text": "obj = Bold(\"spam-o\")  Produces:  <b>spam-o</b>",
            "title": "Syntax"
        },
        {
            "location": "/classes/code/",
            "text": "Code Class\n\n\nThis class is the dars wrapper for the \n<code></code>\n element of HTML.\n\n\nSyntax\n\n\nobj = Code(\"print('Oh, hello there.')\")\n\n\n\n\nProduces:\n\n\n<code>print('Oh, hello there.')</code>",
            "title": "Code"
        },
        {
            "location": "/classes/code/#code-class",
            "text": "This class is the dars wrapper for the  <code></code>  element of HTML.",
            "title": "Code Class"
        },
        {
            "location": "/classes/code/#syntax",
            "text": "obj = Code(\"print('Oh, hello there.')\")  Produces:  <code>print('Oh, hello there.')</code>",
            "title": "Syntax"
        },
        {
            "location": "/classes/blockquote/",
            "text": "Blockquote Class\n\n\nThis class is the dars wrapper for the \n<blockquote></blockquote>\n element of HTML.\n\n\nSyntax\n\n\nobj = Blockquote(\"spam-o\")\n\n\n\n\nProduces:\n\n\n<blockquote>spam-o</blockquote>",
            "title": "Blockquote"
        },
        {
            "location": "/classes/blockquote/#blockquote-class",
            "text": "This class is the dars wrapper for the  <blockquote></blockquote>  element of HTML.",
            "title": "Blockquote Class"
        },
        {
            "location": "/classes/blockquote/#syntax",
            "text": "obj = Blockquote(\"spam-o\")  Produces:  <blockquote>spam-o</blockquote>",
            "title": "Syntax"
        },
        {
            "location": "/classes/anchor/",
            "text": "Anchor Class\n\n\nThis class is the dars wrapper for the \n<a id=\"\"></a>\n element of HTML.\n\n\nSyntax\n\n\nobj = Anchor(\"spam-o\", \"anchor-of-cool\")\n\n\n\n\nWhere the first argument is the text and the second is the Anchor ID.\n\n\nProduces:\n\n\n<a id=\"anchor-of-cool\">spam-o</a>",
            "title": "Anchor"
        },
        {
            "location": "/classes/anchor/#anchor-class",
            "text": "This class is the dars wrapper for the  <a id=\"\"></a>  element of HTML.",
            "title": "Anchor Class"
        },
        {
            "location": "/classes/anchor/#syntax",
            "text": "obj = Anchor(\"spam-o\", \"anchor-of-cool\")  Where the first argument is the text and the second is the Anchor ID.  Produces:  <a id=\"anchor-of-cool\">spam-o</a>",
            "title": "Syntax"
        },
        {
            "location": "/classes/contact/",
            "text": "Contact Class\n\n\nThis class is a simple one-liner for making a Contact Information area.\n\n\nSyntax\n\n\nobj = Bold(\"Martian Waffles\", \"123-654-7890\", \"info@martian-waffles.com\", \"Call us or e-mail us at anytime!\")\n\n\n\n\nThe arguments:\n\n\n\n\nName/Company\n\n\nPhone number\n\n\nE-mail (checked for validity; if it isn't a valid e-mail, it will still be shown but not linked with a mailto.)\n\n\nExtra text (at the bottom)\n\n\n\n\nProduces:\n\n\nMartian Waffles<br>\n&#9742; 123-654-7890<br>\n&#9993; <a href=\"mailto:info@martian-waffles.com\">info@martian-waffles.com</a><br>\nCall us or e-mail us at anytime!<br>\n\n\n\n\nThe &...;'s are a symbol for a phone and a symbol for an envelope, respectively.",
            "title": "Contact"
        },
        {
            "location": "/classes/contact/#contact-class",
            "text": "This class is a simple one-liner for making a Contact Information area.",
            "title": "Contact Class"
        },
        {
            "location": "/classes/contact/#syntax",
            "text": "obj = Bold(\"Martian Waffles\", \"123-654-7890\", \"info@martian-waffles.com\", \"Call us or e-mail us at anytime!\")  The arguments:   Name/Company  Phone number  E-mail (checked for validity; if it isn't a valid e-mail, it will still be shown but not linked with a mailto.)  Extra text (at the bottom)   Produces:  Martian Waffles<br>\n&#9742; 123-654-7890<br>\n&#9993; <a href=\"mailto:info@martian-waffles.com\">info@martian-waffles.com</a><br>\nCall us or e-mail us at anytime!<br>  The &...;'s are a symbol for a phone and a symbol for an envelope, respectively.",
            "title": "Syntax"
        },
        {
            "location": "/classes/external/",
            "text": "External Class\n\n\nThis class is the dars wrapper for the \n<link href=\"\" rel=\"\" />\n element of HTML.\n\n\nSyntax\n\n\nobj = Bold(\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\", \"stylesheet\")\n\n\n\n\nThe first argument is the location and the second argument is the type.\n\n\nProduces:\n\n\n<link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />",
            "title": "External"
        },
        {
            "location": "/classes/external/#external-class",
            "text": "This class is the dars wrapper for the  <link href=\"\" rel=\"\" />  element of HTML.",
            "title": "External Class"
        },
        {
            "location": "/classes/external/#syntax",
            "text": "obj = Bold(\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\", \"stylesheet\")  The first argument is the location and the second argument is the type.  Produces:  <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />",
            "title": "Syntax"
        },
        {
            "location": "/classes/image/",
            "text": "Image Class\n\n\nThis class is the dars wrapper for the \n<img src=\"\" alt=\"\" />\n element of HTML.\n\n\nSyntax\n\n\nobj = Image(\"http://example.com/spam.jpg\", \"The Face of True Beauty\")\n\n\n\n\nThe first argument is the image's source, and the second is the alternate description text if the image fails to load.\n\n\nProduces:\n\n\n<img src=\"http://example.com/spam.jpg\" alt=\"The Face of True Beauty\" />\n\n\n\n\nYou can also specify the width and height to scale the image to. If only the width or the height is provided, it will scale the other to keep the original Aspect Ratio.\n\n\nobj = Image(\"http://example.com/spam.jpg\", \"The Face of True Beauty\", height=2000)\n\n\n\n\n<img src=\"http://example.com/spam.jpg\" alt=\"The Face of True Beauty\" height=\"2000\"/>",
            "title": "Image"
        },
        {
            "location": "/classes/image/#image-class",
            "text": "This class is the dars wrapper for the  <img src=\"\" alt=\"\" />  element of HTML.",
            "title": "Image Class"
        },
        {
            "location": "/classes/image/#syntax",
            "text": "obj = Image(\"http://example.com/spam.jpg\", \"The Face of True Beauty\")  The first argument is the image's source, and the second is the alternate description text if the image fails to load.  Produces:  <img src=\"http://example.com/spam.jpg\" alt=\"The Face of True Beauty\" />  You can also specify the width and height to scale the image to. If only the width or the height is provided, it will scale the other to keep the original Aspect Ratio.  obj = Image(\"http://example.com/spam.jpg\", \"The Face of True Beauty\", height=2000)  <img src=\"http://example.com/spam.jpg\" alt=\"The Face of True Beauty\" height=\"2000\"/>",
            "title": "Syntax"
        },
        {
            "location": "/classes/italics/",
            "text": "Italics Class\n\n\nThis class is the dars wrapper for the \n<i></i>\n element of HTML.\n\n\nSyntax\n\n\nobj = Italics(\"spam-o\")\n\n\n\n\nProduces:\n\n\n<i>spam-o</i>",
            "title": "Italics"
        },
        {
            "location": "/classes/italics/#italics-class",
            "text": "This class is the dars wrapper for the  <i></i>  element of HTML.",
            "title": "Italics Class"
        },
        {
            "location": "/classes/italics/#syntax",
            "text": "obj = Italics(\"spam-o\")  Produces:  <i>spam-o</i>",
            "title": "Syntax"
        },
        {
            "location": "/classes/jscript/",
            "text": "JScript Class\n\n\nThis class is the dars wrapper for the \n<script></script>\n element of HTML. For more info on JavaScript, go \nhere\n.\n\n\nSyntax\n\n\nobj = JScript('''\nfunction buttonClick() {\n  alert(\"You have pressed the button!\")\n}\n''')\n\n\n\n\nProduces:\n\n\n<script>\nfunction buttonClick() {\n  alert(\"You have pressed the button!\")\n}\n</script>",
            "title": "JScript"
        },
        {
            "location": "/classes/jscript/#jscript-class",
            "text": "This class is the dars wrapper for the  <script></script>  element of HTML. For more info on JavaScript, go  here .",
            "title": "JScript Class"
        },
        {
            "location": "/classes/jscript/#syntax",
            "text": "obj = JScript('''\nfunction buttonClick() {\n  alert(\"You have pressed the button!\")\n}\n''')  Produces:  <script>\nfunction buttonClick() {\n  alert(\"You have pressed the button!\")\n}\n</script>",
            "title": "Syntax"
        },
        {
            "location": "/classes/list/",
            "text": "List Class\n\n\nThis class is the dars wrapper for the \n<[o/u]l><li></li></[o/u]l>\n element of HTML.\n\n\nSyntax\n\n\nobj = List(\"spam-o\", \"bacon\", \"waffles\", \"...and many more!\")\n\n\n\n\nProduces:\n\n\n<ul>\n  <li>spam-o</li>\n  <li>bacon</li>\n  <li>waffles</li>\n  <li>...and many more!</li>\n</ul>\n\n\n\n\nYou can provide any amount of strings as list items. To make a numbered list (ordered) you can do:\n\n\nobj = List(\"spam-o\", \"bacon\", \"waffles\", \"...and many more!\", ordered=True)\n\n\n\n\nWhich produces:\n\n\n<ol>\n  <li>spam-o</li>\n  <li>bacon</li>\n  <li>waffles</li>\n  <li>...and many more!</li>\n</ol>\n\n\n\n\nYou can also customize the text before the list item (the \"bullet\"). A list of types:\n\n\nUnordered List Types:\n\n\n\n\ndisc (default)\n\n\ncircle\n\n\nsquare\n\n\nnone\n\n\n\n\nOrdered List Types:\n\n\n\n\n1 (number the items) (default)\n\n\nA (uppercase alphabet the items)\n\n\na (lowercase alphabet the items)\n\n\nI (uppercase roman numerals)\n\n\ni (lowercase roman numerals)\n\n\n\n\nobj = List(\"spam-o\", \"bacon\", \"waffles\", \"...and many more!\", type=\"square\")\n\n\n\n\n<ul style=\"list-style-type:square\">\n  <li>spam-o</li>\n  <li>bacon</li>\n  <li>waffles</li>\n  <li>...and many more!</li>\n</ul>",
            "title": "List"
        },
        {
            "location": "/classes/list/#list-class",
            "text": "This class is the dars wrapper for the  <[o/u]l><li></li></[o/u]l>  element of HTML.",
            "title": "List Class"
        },
        {
            "location": "/classes/list/#syntax",
            "text": "obj = List(\"spam-o\", \"bacon\", \"waffles\", \"...and many more!\")  Produces:  <ul>\n  <li>spam-o</li>\n  <li>bacon</li>\n  <li>waffles</li>\n  <li>...and many more!</li>\n</ul>  You can provide any amount of strings as list items. To make a numbered list (ordered) you can do:  obj = List(\"spam-o\", \"bacon\", \"waffles\", \"...and many more!\", ordered=True)  Which produces:  <ol>\n  <li>spam-o</li>\n  <li>bacon</li>\n  <li>waffles</li>\n  <li>...and many more!</li>\n</ol>  You can also customize the text before the list item (the \"bullet\"). A list of types:  Unordered List Types:   disc (default)  circle  square  none   Ordered List Types:   1 (number the items) (default)  A (uppercase alphabet the items)  a (lowercase alphabet the items)  I (uppercase roman numerals)  i (lowercase roman numerals)   obj = List(\"spam-o\", \"bacon\", \"waffles\", \"...and many more!\", type=\"square\")  <ul style=\"list-style-type:square\">\n  <li>spam-o</li>\n  <li>bacon</li>\n  <li>waffles</li>\n  <li>...and many more!</li>\n</ul>",
            "title": "Syntax"
        },
        {
            "location": "/classes/mark/",
            "text": "Mark Class\n\n\nThis class is the dars wrapper for the \n<mark></mark>\n element of HTML. (The mark element highlights text)\n\n\nSyntax\n\n\nobj = Mark(\"spam-o\")\n\n\n\n\nProduces:\n\n\n<mark>spam-o</mark>",
            "title": "Mark"
        },
        {
            "location": "/classes/mark/#mark-class",
            "text": "This class is the dars wrapper for the  <mark></mark>  element of HTML. (The mark element highlights text)",
            "title": "Mark Class"
        },
        {
            "location": "/classes/mark/#syntax",
            "text": "obj = Mark(\"spam-o\")  Produces:  <mark>spam-o</mark>",
            "title": "Syntax"
        },
        {
            "location": "/classes/scripted/",
            "text": "Scripted Class\n\n\nThis class is the dars wrapper for the \n<[sup/sub]></[sup/sub]>\n element of HTML. NOTE: This has nothing to do with JavaScript. That's the JScript class.\n\n\nSyntax\n\n\nobj = Scripted(\"spam-o\")\n\n\n\n\nProduces:\n\n\n<sup>spam-o</sup>\n\n\n\n\nTo do a subscript, you have to set the type argument:\n\n\nobj = Scripted(\"spam-o\", type=\"subscript\")\n\n\n\n\n<sub>spam-o</sub>",
            "title": "Scripted"
        },
        {
            "location": "/classes/scripted/#scripted-class",
            "text": "This class is the dars wrapper for the  <[sup/sub]></[sup/sub]>  element of HTML. NOTE: This has nothing to do with JavaScript. That's the JScript class.",
            "title": "Scripted Class"
        },
        {
            "location": "/classes/scripted/#syntax",
            "text": "obj = Scripted(\"spam-o\")  Produces:  <sup>spam-o</sup>  To do a subscript, you have to set the type argument:  obj = Scripted(\"spam-o\", type=\"subscript\")  <sub>spam-o</sub>",
            "title": "Syntax"
        },
        {
            "location": "/classes/button/",
            "text": "Button Class\n\n\nThis class is the dars wrapper for the \n<button></button>\n element of HTML.\n\n\nSyntax\n\n\nobj = Button(\"spam-o\", onclick=\"hello()\")\n\n\n\n\nProduces:\n\n\n<button onclick=\"hello()\">spam-o</button>\n\n\n\n\nYou can also easily make the link go somewhere:\n\n\nobj = Button(\"spam-o\", href=\"http://example.com/\")\n\n\n\n\n<a href=\"http://example.com/\">\n  <button>spam-o</button>\n</a>",
            "title": "Button"
        },
        {
            "location": "/classes/button/#button-class",
            "text": "This class is the dars wrapper for the  <button></button>  element of HTML.",
            "title": "Button Class"
        },
        {
            "location": "/classes/button/#syntax",
            "text": "obj = Button(\"spam-o\", onclick=\"hello()\")  Produces:  <button onclick=\"hello()\">spam-o</button>  You can also easily make the link go somewhere:  obj = Button(\"spam-o\", href=\"http://example.com/\")  <a href=\"http://example.com/\">\n  <button>spam-o</button>\n</a>",
            "title": "Syntax"
        }
    ]
}